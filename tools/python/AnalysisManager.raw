#!/usr/bin/python
import json, os, re, sys
sys.path.append(os.path.join(os.path.split(os.path.split(os.path.realpath(__file__))[0])[0], "tools", "python"))
from global_functions import *
from organize_paths_and_files import *

PRINTLEVEL = 1

def myprint(text):
    print "  "*PRINTLEVEL+text
    
def ask(question, allowed_answers = "@"):
    global PRINTLEVEL
    myprint(question)
    PRINTLEVEL += 1
    while True:
        answer = raw_input("  "*PRINTLEVEL)
        if answer != "" and (allowed_answers == "@" or answer in allowed_answers):
            break
        print "  "*PRINTLEVEL+" (Invalid Input)"
    PRINTLEVEL -= 1
    return answer

def ask_multiline(question, allowed_answers = "@"):
  global PRINTLEVEL
  myprint(question)
  lines = list()
  line = ""
  PRINTLEVEL += 1
  while(True):
    line = raw_input("  "*PRINTLEVEL)
    if line == ";;":
      break    
    elif line != "" and (allowed_answers == "@" or line in allowed_answers):      
      lines.append(line)
    else:
      myprint("(Invalid Input. Ignored.)")
  PRINTLEVEL -= 1
  return lines

def create_analysis():
  global PRINTLEVEL
  myprint('This will collect all necessary information to create a full analysis and')
  myprint('Takes care for the creation and implementation of the source files into the code.')
  myprint('Please answer the following questions.')
  myprint('Attention: Your input is NOT saved before you finish this questionnaire!')
  myprint('')
  
  #==========================================================================  
  CURRLEVEL = PRINTLEVEL
  while True:    
    try:
      PRINTLEVEL = CURRLEVEL
      myprint('1. General Information to build analysis')
      PRINTLEVEL += 1
      author = ask("Your Name (to declare the analysis author): ")
      authoremail = ask("Your Email: ")
      analysis = ask("Analysis Name: ")
      # Check whether parameter file already exists
      files = get_analysis_files([analysis])
      if os.path.isfile(files['analysis_settings'][analysis]):
        skip = ask("A parameter file for this analysis already exists! [(u)se, (o)verwrite]", "uo")
        if skip =="u":
          add_analysis(analysis)
          return
        
      short_info = ask("Description (short, one line): ")
      # Replace two spaces by one, as two spaces are internally interpreted as column separators in CheckMATE
      while short_info.find("  ") != -1:
        short_info = short_info.replace("  ", " ")
    
      long_info = ask_multiline("Description (long, multiple lines, finish with ';;' on a new line): ")
      lumi = ask("Luminosity (in fb^-1): ")
      cr = ask("Do you plan to implement control regions to that analysis? [(y)es, (n)o)", "yn")
      break
    except KeyboardInterrupt:
      try:
        myprint('')
        myprint('>>> Caught Interrupting Signal')
        myprint('>>> Press any key to restart current question block')
        myprint('    or resend signal to abort')
        raw_input("")
      except KeyboardInterrupt:
        exit(1)
  PRINTLEVEL = CURRLEVEL
  
  myprint('')
  CURRLEVEL = PRINTLEVEL
  while True:    
    try:
      PRINTLEVEL = CURRLEVEL
      myprint('2. Information on Signal Regions')
      PRINTLEVEL += 1
      signal_regions = ask_multiline("List all signal regions (one per line, finish with ';;' on a new line):")
      while (True): 
        myprint("Information: We are now going to ask you which numbers you want to provide for each signal region. ")
        myprint("Different analyses usually give their results with varying details, e.g. some give only the full background ")
        myprint("uncertainty, whereas others show the individual statistical and systematical contributions. We therefore ")
        myprint("first have to declare, which sets of numbers are actually given, and whether this information is sufficient")
        myprint("for CheckMATE to run properly.");
	myprint("List one per line, finish with ';;' on a new line");
        allowed = ["obs", "bkg", "bkg_err_stat", "bkg_err_sys", "bkg_errm_sys", "bkg_errp_sys", "bkg_err", "bkg_errp", "bkg_errm",  "S95_obs", "S95_exp", "S95_exp_errp", "S95_exp_errm", "S95_exp_err"]
        myprint("Allowed categories are:")
        myprint("     "+str(allowed).replace("[", "").replace("]", "").replace("'", ""))
        get_details = ask("Do you need information on the meaning of these categories?", "yn")
        if get_details == "y":
          PRINTLEVEL += 1
          myprint("obs: Observed number of events")
          myprint("bkg: Expected number of background events")
          myprint("bkg_err_stat: Expected statistical error on bkg")
          myprint("bkg_err_sys: Expected systematical error on bkg (in case of symmetric errors)")
          myprint("bkg_errp_sys / bkg_errm_sys: Expected systematical errors (in case of asymmetric errors)")
          myprint("bkg_err: Expected total error on bkg (in case of symmetric errors)")
          myprint("bkg_errp / bkg_errm: (in case of asymmetric errors)")
          myprint("S95_obs: Observed 95% upper limit on signal events")
          myprint("S95_exp: Expected 95% upper limit on signal events")
          myprint("S95_exp_err: Uncertainty on expected 95% upper limit on signal events (in case of symmetric errors)")
          myprint("S95_exp_errp / S95_exp_errm: Uncertainty on expected 95% upper limit on signal events (in case of asymmetric errors)")
          myprint("Note that not all of these numbers have to be given (e.g. you don't have to give the total error if you give the individual stat and sys contributions)")
          myprint("However, there are some requirements, about which you will be warned if you don't meet them (e.g. giving xyz_errp without xyz_errm)")
          PRINTLEVEL -= 1
        info_set = ask_multiline("List all categories you want to supply", allowed)
        if "bkg" not in info_set:
          myprint("You have to provide the number of background events! Starting Over.")
        elif "obs" not in info_set:
          myprint("You have to provide the number of observed events! Starting Over.")
        elif "bkg_err" not in info_set and "bkg_errp" not in info_set and "bkg_err_sys" not in info_set and "bkg_errp_sys" not in info_set:
          myprint("You have to provide an error on the number of background events! Starting Over")
        elif ("bkg_err_sys" in info_set or "bkg_errp_sys" in info_set) and "bkg_err_stat" not in info_set:
          myprint("You cannot give the systematic error without the statistical error! Starting Over")
        elif "bkg_errp_sys" in info_set and "bkg_errm_sys" not in info_set:
          myprint("You have to give both sides in case of asymmetric errors! Starting Over")
        elif "bkg_errp" in info_set and "bkg_errm" not in info_set:
          myprint("You have to give both sides in case of asymmetric errors! Starting Over")
        elif "S95_exp_errp" in info_set and "S95_exp_errm" not in info_set:
          myprint("You have to give both sides in case of asymmetric errors! Starting Over")
        else:
          break
      myprint("The set of information you entered is valid.")
      myprint("You now have to add the numbers for each of the given signal regions.")
      PRINTLEVEL += 1
      reference_data = dict()
      for sr in signal_regions:
        reference_data[sr] = dict()
        myprint(sr)
        PRINTLEVEL += 1  
        for info in info_set:
          reference_data[sr][info] = ask(info+": ")
        PRINTLEVEL -= 1
      break
    except KeyboardInterrupt:
      try:
        myprint('')
        myprint('>>> Caught Interrupting Signal')
        myprint('>>> Press any key to restart current question block')
        myprint('    or resend signal to abort')
        raw_input("")
      except KeyboardInterrupt:
        exit(1)
  PRINTLEVEL = CURRLEVEL
       
  myprint('')
  CURRLEVEL = PRINTLEVEL
  while True:    
    try:
      PRINTLEVEL = CURRLEVEL
      myprint("3. Settings for Detector Simulation")
      PRINTLEVEL += 1
      myprint("3.1: Miscellaneous")      
      PRINTLEVEL += 1
      experiment = ask("To which experiment does the analysis correspond? (A)TLAS, (C)MS", "AC");
      PRINTLEVEL -= 1
      
      electron_iso_source = ["c"]
      electron_iso_dR = ["0.2"]
      electron_iso_ptmin = ["0.1"]
      electron_iso_absorrel = ["r"]
      electron_iso_ptratiomax = ["0.2"] 
      electron_niso = 1 
      myprint("3.2: Electron Isolation")
      PRINTLEVEL += 1
      c = ask("Do you need any particular isolation criterion? [(y)es, (n)o]")
      while c != "n":
        myprint("Isolation "+str(electron_niso)+":")
        electron_niso += 1
        PRINTLEVEL += 1             
        electron_iso_source.append(ask("Which objects should be considered for isolation? [(t)racks, (c)alo objects?", "tc"))
        electron_iso_ptmin.append(ask("What is the minimum pt of a surrounding object to be used for isolation? [in GeV]", "@"))
        electron_iso_dR.append(ask("What is the dR used for isolation?", "@"))
        electron_iso_absorrel.append(ask("Is there an absolute or a relative upper limit for the surrounding pt? [(a)bsolute, (r)elative]", "ar"))
        if electron_iso_absorrel[-1] == "a":
            electron_iso_ptratiomax.append(ask("What is the maximum surrounding pt used for isolation [in GeV]?", "@"))
        else:
            electron_iso_ptratiomax.append(ask("What is the maximum pt ratio used for isolation?", "@"))
        PRINTLEVEL -= 1
        myprint("")
        c = ask("Do you need more isolation criteria? [(y)es, (n)o]")
      PRINTLEVEL -= 1
      
      muon_iso_source = ["t"]
      muon_iso_dR = ["0.05"]
      muon_iso_ptmin = ["0.5"]
      muon_iso_absorrel = ["r"]
      muon_iso_ptratiomax = ["0.2"] 
      muon_niso = 1 
      myprint("3.3: Muon Isolation")
      PRINTLEVEL += 1
      c = ask("Do you need any particular isolation criterion? [(y)es, (n)o]")
      while c != "n":
        myprint("Isolation "+str(muon_niso)+":")
        muon_niso += 1
        PRINTLEVEL += 1             
        muon_iso_source.append(ask("Which objects should be considered for isolation? [(t)racks, (c)alo objects?", "tc"))
        muon_iso_ptmin.append(ask("What is the minimum pt of a surrounding object to be used for isolation? [in GeV]", "@"))
        muon_iso_dR.append(ask("What is the dR used for isolation?", "@"))
        muon_iso_absorrel.append(ask("Is there an absolute or a relative upper limit for the surrounding pt? [(a)bsolute, (r)elative]", "ar"))
        if muon_iso_absorrel[-1] == "a":
            muon_iso_ptratiomax.append(ask("What is the maximum surrounding pt used for isolation [in GeV]?", "@"))
        else:
            muon_iso_ptratiomax.append(ask("What is the maximum pt ratio used for isolation?", "@"))
        PRINTLEVEL -= 1
        myprint("")
        c = ask("Do you need more isolation criteria? [(y)es, (n)o]")
      PRINTLEVEL -= 1
      
      photon_iso_source = ["c"]
      photon_iso_dR = ["0.2"]
      photon_iso_ptmin = ["0.1"]
      photon_iso_absorrel = ["r"]
      photon_iso_ptratiomax = ["0.2"] 
      photon_niso = 1 
      myprint("3.4: Photon Isolation")
      PRINTLEVEL += 1
      c = ask("Do you need any particular isolation criterion? [(y)es, (n)o]")
      while c != "n":
        myprint("Isolation "+str(photon_niso)+":")
        photon_niso += 1
        PRINTLEVEL += 1             
        photon_iso_source.append(ask("Which objects should be considered for isolation? [(t)racks, (c)alo objects?", "tc"))
        photon_iso_ptmin.append(ask("What is the minimum pt of a surrounding object to be used for isolation? [in GeV]", "@"))
        photon_iso_dR.append(ask("What is the dR used for isolation?", "@"))
        photon_iso_absorrel.append(ask("Is there an absolute or a relative upper limit for the surrounding pt? [(a)bsolute, (r)elative]", "ar"))
        if photon_iso_absorrel[-1] == "a":
            photon_iso_ptratiomax.append(ask("What is the maximum surrounding pt used for isolation [in GeV]?", "@"))
        else:
            photon_iso_ptratiomax.append(ask("What is the maximum pt ratio used for isolation?", "@"))
        PRINTLEVEL -= 1
        myprint("")
        c = ask("Do you need more isolation criteria? [(y)es, (n)o]")
      PRINTLEVEL -= 1
      
      myprint("3.5: Jets")
      PRINTLEVEL += 1
      jets_conedR = ask("Which dR cone radius do you want to use for the FastJet algorithm?", "@")
      jets_ptmin = ask("What is the minimum pt of a jet? [in GeV]", "@")
      jets_second = ask("Do you need a separate, extra type of jet? [(y)es, (n)o]")
      if jets_second == "y":
        jets_conedR_second = ask("Second Jet: Which dR cone radius do you want to use for the FastJet algorithm?", "@")
        jets_ptmin_second = ask("Second Jet: What is the minimum pt of a jet? [in GeV]", "@")
      
      jets_btagging = ask("Do you want to use b-tagging? [(y)es, (n)o]")
      if jets_btagging == "y":
        c = "y"
        jets_btagging_n = 0
        jets_btagging_eff = []
      
      while c == "y":
        jets_btagging_n += 1
        myprint("b-Tagging "+str(jets_btagging_n)+":")
        PRINTLEVEL += 1
        jets_btagging_eff.append(ask("What is the signal efficiency to tag a b-jet? [in %]", "@"))
        PRINTLEVEL -= 1
        c = ask("Do you need more b tags? [(y)es, (n)o]")
        
      jets_tautagging = ask("Do you want to use tau-tagging? [(y)es, (n)o]")    
      break
    except KeyboardInterrupt:
      try:
        myprint('')
        myprint('>>> Caught Interrupting Signal')
        myprint('>>> Press any key to restart current question block')
        myprint('    or resend signal to abort')
        raw_input("")
      except KeyboardInterrupt:
        exit(1)
  PRINTLEVEL = CURRLEVEL
     
  keys = locals().keys()
  parameters = dict()
  for k in keys:
    if not k.startswith("_") and k not in ["k", "myprint", "sort_iso", "ask", "PRINTLEVEL", "i", "c", "sr", "allowed", "get_details", "info"]:
      parameters[k] = str(locals()[k])
  
  files = get_analysis_files([analysis])
  jfile = open(files['analysis_settings'][analysis], "wb")
  jfile.write(json.dumps(parameters,sort_keys=True, indent=2))
  jfile.close()
  myprint(" - Variable values saved in "+files['analysis_settings'][analysis])     
  add_analysis(analysis)

def add_analysis(analysis):
  global PRINTLEVEL
  files = get_analysis_files([analysis])  
  jfile = open(files['analysis_settings'][analysis], "rb")
  parameters = json.loads(jfile.read())
  jfile.close()
           
  template_file = open(files['analysis_template_source'], "r")
  contents = template_file.read()
  template_file.close()  
  contents = contents.replace("@@analysis@@", analysis).replace("@@Analysis@@", analysis.capitalize()).replace("@@ANALYSIS@@", analysis.upper())
  contents = contents.replace("@@lumi@@", parameters["lumi"])
  contents = contents.replace("@@author@@", parameters["author"])
  contents = contents.replace("@@authoremail@@", parameters["authoremail"])
  contents = contents.replace("@@longInfo@@", str(parameters["long_info"]).replace("['", '"@#').replace("']", '\\n"').replace("', '", '\\n"\n     "@#'))
  signal_region_string = ""
  for sr in eval(parameters["signal_regions"]):
    signal_region_string += sr+";"
  contents = contents.replace("@@signalregions@@", signal_region_string);
  real_file = open(files['analysis_source'][analysis], "w")
  real_file.write(contents)
  real_file.close()
  myprint(" - Created source file  "+files['analysis_source'][analysis])
  
  if parameters["cr"] == "y":
    template_file = open(files['analysis_template_CR_source'], "r")
    contents = template_file.read()
    template_file.close()  
    contents = contents.replace("@@analysis@@", analysis).replace("@@Analysis@@", analysis.capitalize()).replace("@@ANALYSIS@@", analysis.upper())
    contents = contents.replace("@@lumi@@", parameters["lumi"])
    contents = contents.replace("@@author@@", parameters["author"])
    contents = contents.replace("@@authoremail@@", parameters["authoremail"])
    contents = contents.replace("@@longInfo@@", str(parameters["long_info"]).replace("['", '"@#').replace("']", '\\n"').replace("', '", '\\n"\n     "@#'))
    real_file = open(files['analysis_CR_source'][analysis], "w")
    real_file.write(contents)
    real_file.close()
    myprint(" - Created source file  "+files['analysis_CR_source'][analysis])
  
  template_file = open(files['analysis_template_header'], "r")
  contents = template_file.read()
  template_file.close()
  contents = contents.replace("@@author@@", parameters["author"])
  contents = contents.replace("@@authoremail@@", parameters["authoremail"])
  contents = contents.replace("@@analysis@@", analysis).replace("@@Analysis@@", analysis.capitalize()).replace("@@ANALYSIS@@", analysis.upper())
  if parameters["cr"] == "y":
    contents = contents.replace("@@BEGINCR@@", "").replace("@@ENDCR@@", "")
  else:
    contents = re.sub(re.compile(r"@@BEGINCR@@.*@@ENDCR@@", re.DOTALL), "", contents)
  real_file = open(files['analysis_header'][analysis], "w")
  real_file.write(contents)
  real_file.close()
  myprint(" - Created header file  "+files['analysis_header'][analysis])
    
  template_file = open(files['analysis_makefile'], "r")
  contents = template_file.read()
  template_file.close()
  contents = contents.replace("doAnalysis_SOURCES += ", "doAnalysis_SOURCES += src/"+analysis+".cc include/"+analysis+".h ")
  if parameters["cr"] == "y":
    contents = contents.replace("doAnalysis_SOURCES += ", "doAnalysis_SOURCES += src/"+analysis+"_CR.cc ")
  real_file = open(files['analysis_makefile'], "w")
  real_file.write(contents)
  real_file.close()
  myprint(" - Updated Makefile")
  
  template_file = open(files['analysis_main'], "r")
  contents = template_file.read()
  template_file.close()
  contents = contents.replace("//@@extraheader@@", "#include \""+analysis+".h\" \n//@@extraheader@@")
  contents = contents.replace("//@@extracode@@", "    else if(analysis == \""+analysis+"\") {\n      "+analysis.capitalize()+" a(inputFile, outputFolder, outputPrefix, xsect, xsecterr, branches, flags);\n      a.loopOverEvents();\n    }\n//@@extracode@@")
  if parameters["cr"] == "y":
    contents = contents.replace("//@@extracode@@", "    else if(analysis == \""+analysis+"_CR\") {\n      "+analysis.capitalize()+"_CR a(inputFile, outputFolder, outputPrefix, xsect, xsecterr, branches, flags);\n      a.loopOverEvents();\n    }\n//@@extracode@@")
  real_file = open(files['analysis_main'], "w")
  real_file.write(contents)
  real_file.close()  
  myprint(" - Updated main source  main.cc")
  
  
  # Creating a txt file in tabular form which shows all the reference data-
  # This file is a) human readable and b) it is used (due to historical reasons)
  # by the evaluation routine in CheckMATE
  reference_file = open(files['evaluation_reference'][analysis], "w")
  first_row = "SR  "
  for info in eval(parameters["info_set"]):
    first_row += info+"  "
  reference_file.write(first_row+"\n")
  for sr in eval(parameters["signal_regions"]):
    whole_row = sr+"  "
    for info in eval(parameters["info_set"]):
      whole_row += eval(parameters["reference_data"])[sr][info]+"  "
    reference_file.write(whole_row+"\n")
  reference_file.close()  
  format_columnated_file(files["evaluation_reference"][analysis])
  myprint(" - Reference file created")
  
  # Adding the most important analysis information to the list_of_analysis file.
  list_file = open(files['list_of_analyses'], "a")
  list_file.write(analysis+"  "+str(len(eval(parameters["signal_regions"])))+"  "+parameters["short_info"]+"  "+parameters["lumi"]+"  ")
  if parameters["cr"] == "y":
    list_file.write("yes  ")
  else:
    list_file.write("no  ")
  list_file.write("  "+parameters["author"]+"  "+parameters["authoremail"]+"\n")
  list_file.close()  
  format_columnated_file(files["list_of_analyses"])
  myprint(" - List of analyses updated")
  PRINTLEVEL -= 1
  myprint("Analysis "+analysis+" has been added successfully!")
  myprint("Run 'make' from the main CheckMATE folder to compile it!")
  
  
def list_analyses():
   files = get_standard_files()
   f = open(files['list_of_analyses'], "r")
   x = f.readline()
   print "#"*(len(x)+4)
   print "# "+x[:-1]+" #"
   for x in f:
     print "# "+x[:-1]+" #" 
   print "#"*(len(x)+4)
   
  
def remove_analysis():
  global PRINTLEVEL
  myprint('This will remove all source files and other appearances in the analysis framework.')
  myprint('(You can re-add the analysis as long as you keep the settings file in the /data directory).')
  PRINTLEVEL += 1
  analysis = ask("Analysis Name: ")
  files = get_analysis_files([analysis])
  jfile = open(files['analysis_settings'][analysis], "rb")
  parameters = json.loads(jfile.read())
  jfile.close()
  
  # Remove analysis-specific files         
  os.remove(files["analysis_source"][analysis])
  if parameters["cr"] == "y":
    os.remove(files["analysis_CR_source"][analysis])
  os.remove(files["analysis_header"][analysis])  
  os.remove(files["evaluation_reference"][analysis])
  
  # Remove sources from Makefile
  template_file = open(files["analysis_makefile"], "r")
  contents = template_file.read()
  template_file.close()
  contents = contents.replace("src/"+analysis+".cc include/"+analysis+".h ", "")
  if parameters["cr"] == "y":
    contents = contents.replace("src/"+analysis+"_CR.cc ", "")
  real_file = open(files["analysis_makefile"], "w")
  real_file.write(contents)
  real_file.close()
  
  # Remove usage of analysis class in main analysis source
  template_file = open(files["analysis_main"], "r")
  contents = template_file.read()
  template_file.close()
  contents = contents.replace("#include \""+analysis+".h\" \n", "")
  contents = contents.replace("    else if(analysis == \""+analysis+"\") {\n      "+analysis.capitalize()+" a(inputFile, outputFolder, outputPrefix, xsect, xsecterr, branches, flags);\n      a.loopOverEvents();\n    }\n", "")
  if parameters["cr"] == "y":
    contents = contents.replace("    else if(analysis == \""+analysis+"_CR\") {\n      "+analysis.capitalize()+"_CR a(inputFile, outputFolder, outputPrefix, xsect, xsecterr, branches, flags);\n      a.loopOverEvents();\n    }\n", "")
  real_file = open(files["analysis_main"], "w")
  real_file.write(contents)
  real_file.close()
  
  # Remove line in analysis list
  template_file = open(files["list_of_analyses"], "r")
  contents = template_file.read()
  template_file.close()
  contents = re.sub(r""+analysis+" .*\n", "", contents)
  real_file = open(files["list_of_analyses"], "w")
  real_file.write(contents)
  real_file.close()
  format_columnated_file(files["list_of_analyses"])
  myprint('All files, except for /data/'+analysis+'_var.j have been removed successfully.')  
  myprint('Keeping the _var.j file will allow you to conveniently re-add the analysis later.')
  

print """
   ____ _               _    __  __    _  _____ _____ 
  / ___| |__   ___  ___| | _|  \/  |  / \|_   _| ____|
 | |   | '_ \ / _ \/ __| |/ / |\/| | / _ \ | | |  _|  
 | |___| | | |  __/ (__|   <| |  | |/ ___ \| | | |___ 
  \____|_| |_|\___|\___|_|\_\_|  |_/_/   \_\_| |_____|
                                           
                    /\  _  _ |   _. _  |\/| _  _  _  _  _ _ 
                   /--\| )(_||\/_)|_)  |  |(_|| )(_|(_)(-|  
                              /                     _/      
                                         """
action = ask("""What do you want? 
    -(l)ist all analyses,
    -(a)dd a new analysis to CheckMATE,
    -(r)emove an analysis from CheckMATE]""", "lar")
if action == "a":
  create_analysis()
elif action == "l":
  list_analyses()
elif action == "r":
  remove_analysis()


